alpha_gamma_sim <- 1
beta_gamma_sim <- 1
theta_sim <- 1
gamma_sim <- 1
m <- 1
for(m in 1:M){
theta_sim <- bayesmpp_theta(d, alpha_d_sim, alpha_theta_sim, beta_theta_sim)
j <- 1
for (j in 1:n){
theta_rep[m,j] <- theta_sim
}
}
rm(list=())
rm(list=ls())
t<-c(1,2,3,4)
t1<-t(t)
d<-(t1)
alpha_d_sim<-1
alpha_theta_sim<-1
beta_theta_sim<-1
n<-nrow(d)
d<-t(t1)
n<-nrow(d)
theta_sim<-rgamma(1,alpha_d_sim+alpha_theta_sim,d[1,]+beta_theta_sim)
theta_sim
theta_rep <- matrix(NaN,M,n)
rm(list = ls())
t<-c(1,2,3,4)
t1<-t(t1)
t1<-t(t)
d<-t(t1)
n<-nrow(d)
M<-10
alpha_0=3
beta_0=0.3
theta_rep <- matrix(NaN,M,n)
alpha_d_sim <- 1 # (o cualquiera)
alpha_theta_sim <- 1 # (o cualquiera)
beta_theta_sim <- 1
alpha_gamma_sim <- 1
beta_gamma_sim <- 1
theta_sim <- 1
gamma_sim <- 1
m <- 1
for(m in 1:M){
theta_sim<-rgamma(1,alpha_d_sim+alpha_theta_sim,d[j,]+beta_theta_sim)
j <- 1
for (j in 1:n){
theta_rep[m,j] <- theta_sim
}
}
rm(list=ls())
t<-c(1,2,3,4)
t1<-t(t)
d<-t(t1)
n<-nrow(d)
M<-10
theta_rep <- matrix(NaN,M,n)
alpha_d_sim <- 1 # (o cualquiera)
alpha_theta_sim <- 1 # (o cualquiera)
beta_theta_sim <- 1
alpha_gamma_sim <- 1
beta_gamma_sim <- 1
theta_sim <- 1
gamma_sim <- 1
m<-1
j<-1
for(m in 1:M){
for (j in 1:n){
theta_sim<-rgamma(1,alpha_d_sim+alpha_theta_sim,d[j,]+beta_theta_sim)
theta_rep[m,j]<-theta_sim
}
}
theta_rep
rm(list = ls())
d<-5
n<-3
n<-5
M<-10
theta_rep <- matrix(NaN,M,n)
alpha_d_sim <- 1 # (o cualquiera)
alpha_theta_sim <- 1 # (o cualquiera)
beta_theta_sim <- 1
alpha_gamma_sim <- 1
beta_gamma_sim <- 1
theta_sim <- 1
gamma_sim <- 1
m <- 1
for(m in 1:M){
theta_sim<-rgamma(1,alpha_d_sim+alpha_theta_sim,d+beta_theta_sim)
j <- 1
for (j in 1:n){
theta_rep[m,j] <- theta_sim
}
}
theta_rep
rm(list = ls())
t<-c(2,4,6,8,10)
t1<-t(t)
d<-t(t1)
n<-nrow(d)
M<-10
theta_rep <- matrix(NaN,M,n)
alpha_d_sim <- 1 # (o cualquiera)
alpha_theta_sim <- 1 # (o cualquiera)
beta_theta_sim <- 1
alpha_gamma_sim <- 1
beta_gamma_sim <- 1
theta_sim <- 1
gamma_sim <- 1
m <- 1
for(m in 1:M){
j <- 1
for (j in 1:n){
theta_sim <- bayesmpp_theta(d, alpha_d_sim, alpha_theta_sim, beta_theta_sim)
theta_rep[m,j] <- theta_sim
}
}
rm(list = ls())
source("C:/Users/SONY/Documents/GitHub/Tesis_APAS/Code/bayesmpp_theta.R")
t<-c(2,4,6,8,10)
t1<-t(t)
d<-t(t1)
n<-nrow(d)
M<-10
theta_rep <- matrix(NaN,M,n)
alpha_d_sim <- 1 # (o cualquiera)
alpha_theta_sim <- 1 # (o cualquiera)
beta_theta_sim <- 1
alpha_gamma_sim <- 1
beta_gamma_sim <- 1
theta_sim <- 1
gamma_sim <- 1
m <- 1
for(m in 1:M){
j <- 1
for (j in 1:n){
theta_sim <- bayesmpp_theta(d, alpha_d_sim, alpha_theta_sim, beta_theta_sim)
theta_rep[m,j] <- theta_sim
}
}
theta_rep
rm(list = ls())
source("C:/Users/SONY/Documents/GitHub/Tesis_APAS/Code/bayesmpp_theta.R")
t<-c(2,4,6,8,10)
t1<-t(t)
d<-t(t1)
n<-nrow(d)
M<-10
theta_rep <- matrix(NaN,M,n)
alpha_d_sim <- 1 # (o cualquiera)
alpha_theta_sim <- 1 # (o cualquiera)
beta_theta_sim <- 1
alpha_gamma_sim <- 1
beta_gamma_sim <- 1
theta_sim <- 1
gamma_sim <- 1
m <- 1
for(m in 1:M){
j <- 1
for (j in 1:n){
theta_sim <- bayesmpp_theta(d, alpha_d_sim, alpha_theta_sim, beta_theta_sim)
theta_rep[m,j] <- theta_sim
}
}
theta_rep
rm(list = ls())
source("C:/Users/SONY/Documents/GitHub/Tesis_APAS/Code/bayesmpp_beta_gamma.R")
beta_gamma_rep <- array(NaN,M)
M<-10
beta_gamma_rep <- array(NaN,M)
alpha_theta_sim <- 1 # (o cualquiera)
alpha_d_sim <- 1 # (o cualquiera)
beta_theta_sim <- 1
alpha_gamma_sim <- 1
beta_gamma_sim <- 1
theta_sim <- 1
gamma_sim <- 1
m <- 1
for(m in 1:M){
beta_gamma_sim <- bayesmpp_beta_gamma(gamma_sim, alpha_0, beta_0)
beta_gamma_rep[m] <- beta_gamma_sim
}
rm(list = ls())
source("C:/Users/SONY/Documents/GitHub/Tesis_APAS/Code/bayesmpp_beta_gamma.R")
M<-10
alpha_0=3
beta_0=0.2
beta_gamma_rep <- array(NaN,M)
alpha_d_sim <- 1 # (o cualquiera)
alpha_theta_sim <- 1 # (o cualquiera)
beta_theta_sim <- 1
alpha_gamma_sim <- 1
beta_gamma_sim <- 1
theta_sim <- 1
gamma_sim <- 1
m <- 1
for(m in 1:M){
beta_gamma_sim <- bayesmpp_beta_gamma(gamma_sim, alpha_0, beta_0)
beta_gamma_rep[m] <- beta_gamma_sim
}
beta_gamma_rep
rm(list=ls())
source("C:/Users/SONY/Documents/GitHub/Tesis_APAS/Code/slice.sampler/uni.slice.R")
alpha_d <- 1
alpha_theta <- 2
t<-c(2,4,6,8,10)
t1<-t(t)
d <- t(t1)
n<-nrow(d)
beta_theta <- 1
theta <- 3
alpha_0 = 2
beta_0 = 0.3
alpha_d_sim = 2
j<-1
for(j in 1:n){
bayesmpp_alpha_d <- function(x0=2,d){
if(j == 1){
g<-function(alpha_d,d,alpha_theta=2,beta_theta=1, theta=3, alpha_0=2,beta_0=0.3){
(alpha_d+ alpha_theta)*log(d[j,]+beta_theta)-log(gamma(alpha_d+ alpha_theta))+alpha_d*(log(theta))+(alpha_0-1)*log(alpha_d)-(alpha_d*beta_0)
}
bad <- uni.slice(x0=2, g, w=1, m=Inf, lower=0, upper=+Inf, gx0=NULL)
return(bad)
}else{
g <- function(alpha_d, d, alpha_theta=2, beta_theta=1, theta=3, alpha_0=2, beta_0=0.3){
(alpha_d+alpha_theta)*log(d[j-1,]+beta_theta)-log(gamma(alpha_d+ alpha_theta))+alpha_d*(log(theta))+(alpha_0-1)*log(alpha_d)-(alpha_d*beta_0)
}
bad<-uni.slice(x0=2, g, w=1, m=Inf, lower=0, upper=+Inf, gx0=NULL)
return(bad)
}
}
}
adi<-bad
bad
d
adi<-bayesmpp_alpha_d(2,d)
adi<-bayesmpp_alpha_d(x0 = 2, d)
rm(list=ls())
source("C:/Users/SONY/Documents/GitHub/Tesis_APAS/Code/slice.sampler/uni.slice.R")
source("C:/Users/SONY/Documents/GitHub/Tesis_APAS/Code/bayesmpp_alpha_d_demo.R")
rm(list = ls())
source("C:/Users/SONY/Documents/GitHub/Tesis_APAS/Code/bayesmpp_alpha_d_demo.R")
rm(list = ls())
source("C:/Users/SONY/Documents/GitHub/Tesis_APAS/Code/slice.sampler/uni.slice.R")
source("C:/Users/SONY/Documents/GitHub/Tesis_APAS/Code/bayesmpp_alpha_d_demo.R")
t<-c(2,4,6,8,10)
t1<-t(t)
d<-t(t1)
n<-nrow(d)
M<-10
alpha_0=2
beta_0=0.3
alpha_d_rep <- array(NaN,M)
alpha_d_sim <- 1 # (o cualquiera)
alpha_theta_sim <- 1 # (o cualquiera)
beta_theta_sim <- 1
alpha_gamma_sim <- 1
beta_gamma_sim <- 1
theta_sim <- 1
gamma_sim <- 1
m <- 1
for(m in 1:M){
j <- 1
for (j in 1:n){
alpha_d_sim <- bayesmpp_alpha_d(x0, d)
alpha_d_rep[m] <- alpha_d_sim
}
}
adi<-bayesmpp_alpha_d(xo=2, )
adi<-bayesmpp_alpha_d(x0=2, )
adi<-bayesmpp_alpha_d(x0=2, d= d)
theta_rep <- matrix(NaN,M,n)
m <- 1
for(m in 1:M){
j <- 1
for (j in 1:n){
theta_sim <- bayesmpp_theta(d, alpha_d_sim, alpha_theta_sim, beta_theta_sim)
theta_rep[m,j] <- theta_sim
}
}
source("C:/Users/SONY/Documents/GitHub/Tesis_APAS/Code/bayesmpp_theta.R")
adi<-bayesmpp_alpha_d(x0=2, d= d)
m <- 1
for(m in 1:M){
j <- 1
for (j in 1:n){
theta_sim <- bayesmpp_theta(d, alpha_d_sim, alpha_theta_sim, beta_theta_sim)
theta_rep[m,j] <- theta_sim
}
}
theta_rep
source("C:/Users/SONY/Documents/GitHub/Tesis_APAS/Code/bayesmpp_alpha_d_demo.R")
alpha_d_rep <- array(NaN,M)
m <- 1
for(m in 1:M){
j <- 1
for (j in 1:n){
alpha_d_sim <- bayesmpp_alpha_d(x0, d)
}
alpha_d_rep[m] <- alpha_d_sim
}
for (j in 1:n){
alpha_d_sim <- bayesmpp_alpha_d(x0, d)
alpha_d_rep[m] <- alpha_d_sim
}
alpha_d_rep
source("C:/Users/SONY/Documents/GitHub/Tesis_APAS/Code/bayesmpp_alpha_d_demo.R")
m <- 1
for(m in 1:M){
j <- 1
for (j in 1:n){
alpha_d_sim <- bayesmpp_alpha_d(x0, d)
alpha_d_rep[m] <- alpha_d_sim
}
}
alpha_d_rep
source("C:/Users/SONY/Documents/GitHub/Tesis_APAS/Code/bayesmpp_alpha_theta_demo.R")
alpha_theta_rep <- array(NaN,M)
m <- 1
for(m in 1:M){
alpha_theta_sim <- bayesmpp_alpha_theta(x0, alpha_d_sim, d)
}
m <- 1
for(m in 1:M){
j <- 1
for (j in 1:n){
alpha_theta_sim <- bayesmpp_alpha_theta(x0, alpha_d_sim, d)
}
alpha_theta_rep[m] <- alpha_theta_sim
}
alpha_theta_rep
source("C:/Users/SONY/Documents/GitHub/Tesis_APAS/Code/bayesmpp_beta_theta_demo.R")
beta_theta_rep <- array(NaN,M)
m <- 1
for(m in 1:M){
j <- 1
for (j in 1:n){
beta_theta_sim <- bayesmpp_beta_theta(x0, alpha_d_sim, alpha_theta_sim, d)
}
beta_theta_rep[m] <- beta_theta_sim
}
beta_theta_rep
t<-c(2,4,6,8)
t1<-t(t)
d<-t(t1)
a<-c(1,3,5,7)
b<-t(a)
c<-t(b)
n<-nrow(d)
n1<-nrow(c)
source("C:/Users/SONY/Documents/GitHub/Tesis_APAS/Code/slice.sampler/uni.slice.R")
source("C:/Users/SONY/Documents/GitHub/Tesis_APAS/Code/bayesmpp_gamma.R")
M<-10
alpha_0=2
beta_0=0-3
beta_0=0.3
gamma_rep <- matrix(NaN,M,n)
alpha_d_sim <- 1 # (o cualquiera)
alpha_theta_sim <- 1 # (o cualquiera)
beta_theta_sim <- 1
alpha_gamma_sim <- 1
beta_gamma_sim <- 1
theta_sim <- 1
gamma_sim <- 1
m <- 1
for(m in 1:M){
j <- 1
for (j in 1:n){
gamma_sim <- bayesmpp_gamma(d, c, alpha_gamma_sim, beta_gamma_sim)
gamma_rep[m,j] <- gamma_sim_new
}
}
source("C:/Users/SONY/Documents/GitHub/Tesis_APAS/Code/bayesmpp_gamma.R")
m <- 1
for(m in 1:M){
j <- 1
for (j in 1:n){
gamma_sim <- bayesmpp_gamma(d, c, alpha_gamma_sim, beta_gamma_sim)
gamma_rep[m,j] <- gamma_sim_new
}
}
source("C:/Users/SONY/Documents/GitHub/Tesis_APAS/Code/bayesmpp_gamma.R")
m <- 1
for(m in 1:M){
j <- 1
for (j in 1:n){
gamma_sim <- bayesmpp_gamma(d, c, alpha_gamma_sim, beta_gamma_sim)
gamma_rep[m,j] <- gamma_sim_new
}
}
source("C:/Users/SONY/Documents/GitHub/Tesis_APAS/Code/bayesmpp_gamma.R")
m <- 1
for(m in 1:M){
j <- 1
for (j in 1:n){
gamma_sim <- bayesmpp_gamma(d, c, alpha_gamma_sim, beta_gamma_sim)
gamma_rep[m,j] <- gamma_sim_new
}
}
source("C:/Users/SONY/Documents/GitHub/Tesis_APAS/Code/bayesmpp_gamma.R")
m <- 1
for(m in 1:M){
j <- 1
for (j in 1:n){
gamma_sim <- bayesmpp_gamma(d, c, alpha_gamma_sim, beta_gamma_sim)
gamma_rep[m,j] <- gamma_sim
}
}
gamma_rep
gamma1_slice<-function(alpha_gamma_sim,beta_gamma_sim,
d,c){
los.unos.c <- which(c$num.cambio==1)
los.unos <- which(d$num.cambio==1)
#a
#-(d[los.unos,"duration"]+alpha_gamma_sim)*log(gamma_sim[los.unos.c,1,1])
#b
#(beta_gamma_sim/gamma_sim[los.unos.c,1,1])+((c[los.unos.c,"costs"]/gamma_sim[los.unos.c,1,1])^(d[los.unos,"duration"]))
uni_gamma1 <- uni.slice(gamma_sim, function(gamma_1) -(d[los.unos,"duration"]+alpha_gamma_sim)*log(gamma_1[los.unos.c,1,1])
-(beta_gamma_sim/gamma_1[los.unos.c,1,1])+((c[los.unos.c,"costs"]/gamma_1[los.unos.c,1,1])^(d[los.unos,"duration"])),
w=1, m=Inf, lower=-Inf, upper=+Inf)
gamma_sim <- attr(uni_gamma1,"uni.slice.evals")
# Output
return(gamma_sim)
}
gamma_sim
source("./Code/slice.sampler/uni.slice.R")
source('./Code/alpha_d_slice.R')
source('./Code/alpha_theta_slice.R')
source('./Code/beta_theta_slice.R')
source('./Code/alpha_gamma_slice.R')
source('./Code/beta_gamma_slice.R')
source('./Code/theta_ij_slice.R')
# Numero de pacientes
N.paciente <- length(unique(datos$paciente))
# Observaciones correspondientes a pacientes
N.observaciones <- aggregate(datos[,c("paciente","num.cambio")],
by=list(datos$paciente),
FUN=max)
dim(N.observaciones)
colnames(N.observaciones) <- c("id","paciente","num.cambios")
dim.datos <- dim(datos)
# --- Repositorios
#	Parametros
alpha_d_rep <- array(NaN,M.sim)
alpha_theta_rep <- array(NaN,M.sim)
beta_theta_rep <- array(NaN,M.sim)
alpha_gamma_rep <- array(NaN,M.sim)
beta_gamma_rep <- array(NaN,M.sim)
# Latentes
thetagamma_rep <- array(NaN,dim=c(dim.datos[1],(dim.datos[2]-1),M.sim))
#dim(thetagamma_rep)
#	--- Valores iniciales
alpha_d_sim <- 1
alpha_theta_sim <- 1
beta_theta_sim <- 1
alpha_gamma_sim <- 1
beta_gamma_sim <- 1
theta_sim <- array(1,dim=c(dim.datos[1],1,1))
gamma_sim <- array(1,dim=c(dim.datos[1],1,1))
#head(datos)
d <- datos[,c("paciente","num.cambio","duration")]
c <- datos[,c("paciente","num.cambio","costs")]
rm(list = ls())
datos<-read.csv("./Diabetes.Marked/datos_agregados.csv", header = TRUE)
head(datos)
source("./Code/bayesmpp.R")
source('./Code/slice.sampler/uni.slice.R')
# Prior
alpha_0 <- 2
beta_0 <- 0.3
# MCMC sampler
M.sim <- 10
source("./Code/slice.sampler/uni.slice.R")
source('./Code/alpha_d_slice.R')
source('./Code/alpha_theta_slice.R')
source('./Code/beta_theta_slice.R')
source('./Code/alpha_gamma_slice.R')
source('./Code/beta_gamma_slice.R')
source('./Code/theta_ij_slice.R')
# Numero de pacientes
N.paciente <- length(unique(datos$paciente))
# Observaciones correspondientes a pacientes
N.observaciones <- aggregate(datos[,c("paciente","num.cambio")],
by=list(datos$paciente),
FUN=max)
dim(N.observaciones)
colnames(N.observaciones) <- c("id","paciente","num.cambios")
dim.datos <- dim(datos)
# --- Repositorios
#	Parametros
alpha_d_rep <- array(NaN,M.sim)
alpha_theta_rep <- array(NaN,M.sim)
beta_theta_rep <- array(NaN,M.sim)
alpha_gamma_rep <- array(NaN,M.sim)
beta_gamma_rep <- array(NaN,M.sim)
# Latentes
thetagamma_rep <- array(NaN,dim=c(dim.datos[1],(dim.datos[2]-1),M.sim))
#dim(thetagamma_rep)
#	--- Valores iniciales
alpha_d_sim <- 1
alpha_theta_sim <- 1
beta_theta_sim <- 1
alpha_gamma_sim <- 1
beta_gamma_sim <- 1
theta_sim <- array(1,dim=c(dim.datos[1],1,1))
gamma_sim <- array(1,dim=c(dim.datos[1],1,1))
#head(datos)
d <- datos[,c("paciente","num.cambio","duration")]
c <- datos[,c("paciente","num.cambio","costs")]
rm(list = ls())
datos<-read.csv("./Diabetes.Marked/datos_agregados.csv", header = TRUE)
